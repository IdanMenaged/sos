Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\n  <profile version=\"1.0\">\n    <option name=\"myName\" value=\"Project Default\" />\n    <inspection_tool class=\"ComposePreviewDimensionRespectsLimit\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"ComposePreviewMustBeTopLevelFunction\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"ComposePreviewNeedsComposableAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"ComposePreviewNotSupportedInUnitTestFiles\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewDimensionRespectsLimit\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewMustBeTopLevelFunction\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewNeedsComposableAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"GlancePreviewNotSupportedInUnitTestFiles\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewAnnotationInFunctionWithParameters\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewApiLevelMustBeValid\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewFontScaleMustBeGreaterThanZero\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewMultipleParameterProviders\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n    <inspection_tool class=\"PreviewPickerAnnotation\" enabled=\"true\" level=\"ERROR\" enabled_by_default=\"true\">\n      <option name=\"composableFile\" value=\"true\" />\n      <option name=\"previewFile\" value=\"true\" />\n    </inspection_tool>\n  </profile>\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision b8f55e62aea237d10c0d95b600e516c102d9ff67)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1729435031754)
@@ -37,6 +37,9 @@
       <option name="composableFile" value="true" />
       <option name="previewFile" value="true" />
     </inspection_tool>
+    <inspection_tool class="PreviewDeviceShouldUseNewSpec" enabled="true" level="WEAK WARNING" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+    </inspection_tool>
     <inspection_tool class="PreviewFontScaleMustBeGreaterThanZero" enabled="true" level="ERROR" enabled_by_default="true">
       <option name="composableFile" value="true" />
       <option name="previewFile" value="true" />
Index: ../receiver/app/src/main/java/com/example/receiver/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.receiver\n\nimport android.app.ActivityManager\nimport android.app.Notification\nimport android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.app.Service\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Bundle\nimport android.os.IBinder\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.example.receiver.ui.theme.ReceiverTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            ReceiverTheme {\n                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->\n                    Greeting(\n                        name = \"Android\",\n                        modifier = Modifier.padding(innerPadding)\n                    )\n                }\n            }\n        }\n\n        // start server communicator\n        if (!serverCommunicatorRunning()) {\n            val serviceIntent = Intent(this, ServerCommunicator::class.java)\n            startForegroundService(serviceIntent)\n        }\n\n    }\n\n    private fun serverCommunicatorRunning(): Boolean {\n        val activityManager = getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager\n        for (service in activityManager.getRunningServices(Integer.MAX_VALUE)) {\n            if (ServerCommunicator::class.java.name == service.service.className) {\n                return true\n            }\n        }\n        return false\n    }\n}\n\n@Composable\nfun Greeting(name: String, modifier: Modifier = Modifier) {\n    Text(\n        text = \"Hello $name!\",\n        modifier = modifier\n    )\n}\n\nclass ServerCommunicator : Service() {\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n        Thread {\n            while (true) {\n                Log.d(\"Service\", \"Service is running...\")\n                try {\n                    Thread.sleep(2000)\n                } catch (e: InterruptedException) {\n                    e.printStackTrace()\n                }\n            }\n        }.start()\n\n        val CHANNEL_ID = \"Foreground Service ID\"\n        val channel = NotificationChannel(\n            CHANNEL_ID,\n            CHANNEL_ID,\n            NotificationManager.IMPORTANCE_LOW\n        )\n\n        getSystemService(NotificationManager::class.java).createNotificationChannel(channel)\n        val notification = Notification.Builder(this, CHANNEL_ID)\n            .setContentText(\"Service is running\")\n            .setContentTitle(\"Service enabled\")\n            .setSmallIcon(R.drawable.ic_launcher_background)\n            .build()\n\n        startForeground(1001, notification)\n        return super.onStartCommand(intent, flags, startId)\n    }\n\n    override fun onBind(intent: Intent?): IBinder? {\n        return null\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../receiver/app/src/main/java/com/example/receiver/MainActivity.kt b/../receiver/app/src/main/java/com/example/receiver/MainActivity.kt
--- a/../receiver/app/src/main/java/com/example/receiver/MainActivity.kt	(revision b8f55e62aea237d10c0d95b600e516c102d9ff67)
+++ b/../receiver/app/src/main/java/com/example/receiver/MainActivity.kt	(date 1729435032151)
@@ -20,8 +20,12 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.tooling.preview.Preview
+import androidx.core.app.NotificationCompat
 import com.example.receiver.ui.theme.ReceiverTheme
 
+const val SERVICE_ID = 1001
+const val NOTIFICATION_UPDATE_DELAY: Long = 2000 // wait 2 seconds before updating the notification
+
 class MainActivity : ComponentActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
@@ -65,33 +69,65 @@
 }
 
 class ServerCommunicator : Service() {
+
+    companion object {
+        const val SERVICE_ID = 1
+        const val CHANNEL_ID = "Foreground Service ID"
+    }
+
     override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
-        Thread {
-            while (true) {
-                Log.d("Service", "Service is running...")
-                try {
-                    Thread.sleep(2000)
-                } catch (e: InterruptedException) {
-                    e.printStackTrace()
-                }
-            }
-        }.start()
-
-        val CHANNEL_ID = "Foreground Service ID"
+        // Create a notification channel
         val channel = NotificationChannel(
             CHANNEL_ID,
-            CHANNEL_ID,
+            "Service Notifications",
             NotificationManager.IMPORTANCE_LOW
         )
+        val notificationManager = getSystemService(NotificationManager::class.java)
+        notificationManager.createNotificationChannel(channel)
+
+        // Initial notification when service starts
+        val initialNotification = Notification.Builder(this, CHANNEL_ID)
+            .setContentText("Service is running")
+            .setContentTitle("Service enabled")
+            .setSmallIcon(R.drawable.ic_launcher_background)
+            .build()
+
+        // Start the service in the foreground
+        startForeground(SERVICE_ID, initialNotification)
+
+        // Start a new thread to periodically log and update the notification
+        Thread {
+            var i = 0
+            while (true) {
+                // Log that the service is running
+                Log.d("Service", "Service is running...")
 
-        getSystemService(NotificationManager::class.java).createNotificationChannel(channel)
-        val notification = Notification.Builder(this, CHANNEL_ID)
-            .setContentText("Service is running")
-            .setContentTitle("Service enabled")
-            .setSmallIcon(R.drawable.ic_launcher_background)
-            .build()
+                var builder = NotificationCompat.Builder(this, CHANNEL_ID)
+                    .setSmallIcon(R.drawable.ic_launcher_background)
+                    .setContentTitle("service log")
+                    .setContentText(i.toString())
+                    .setPriority(NotificationCompat.PRIORITY_DEFAULT)
+
+                // Update the notification
+                val updatedNotification = Notification.Builder(this, CHANNEL_ID)
+                    .setContentText("Service is running")
+                    .setContentTitle("Service enabled")
+                    .setSmallIcon(R.drawable.ic_launcher_background)
+                    .build()
 
-        startForeground(1001, notification)
+                // Notify the updated notification
+                notificationManager.notify(SERVICE_ID, updatedNotification)
+
+                try {
+                    // Sleep for 2 seconds
+                    Thread.sleep(NOTIFICATION_UPDATE_DELAY)
+                } catch (e: InterruptedException) {
+                    e.printStackTrace()
+                }
+                i++
+            }
+        }.start()
+
         return super.onStartCommand(intent, flags, startId)
     }
 
